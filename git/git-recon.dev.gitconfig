[alias]
  # Utility function. Returns branch name and, if a tracking branch, the tracked branch name & tracking status.
  # Most useful as a helper for `with-tracking`
  branches-with-tracking = "!f() {\
    git for-each-ref \"$@\" --format='%(refname:short) %(upstream:short) %(upstream:track)' refs/heads \
    | awk '{if ($2 != \"\" && $3 == \"\") $3 = \"[synced]\"; print}'; \
  }; f"

  # Select a recent branch by number
  checkout-nth = "!f() {\
    count=$1; \
    : 'If count is not a numeric string, print usage and return an error code'; \
    if ! [[ \"$count\" =~ ^[0-9]+$ ]]; then \
      echo \"Checks out the nth recent branch.\"; \
      echo \"Usage: git checkout-nth [<branch_number=10>]\"; \
      echo \"Alias: git con [<branch_number=10>]\"; \
      return 1; \
    fi; \
    git checkout $(git for-each-ref --count=\"${1:-1}\" --sort=-committerdate refs/heads/ --format='%(refname:short)' | sed -n ${1:-1}p); \
  }; f"

  checkout-nth-remote = "!f() {\
    count=$1; \
    : 'If count is not a numeric string, print usage and return an error code'; \
    if ! [[ \"$count\" =~ ^[0-9]+$ ]]; then \
      echo \"Checks out the nth recent remote branch.\"; \
      echo \"Usage: git checkout-nth-remote [<branch_number=10>]\"; \
      echo \"Alias: git con-r [<branch_number=10>]\"; \
      return 1; \
    fi; \
    localBranches=$(git for-each-ref --format='%(refname:short)' --sort=-committerdate refs/heads/ | tr '\n' '@'); \
    remoteBranch=$(git for-each-ref --count=${count} --sort=-committerdate refs/remotes/ --format='%(refname:short)' | sed -n ${count}p); \
    : 'If remote branch is the 'HEAD' pointer or the bare origin, it is the default branch.'; \
    if [[ $remoteBranch == */HEAD || $remoteBranch != *"/"* ]]; then \
      : 'Get the name of the remote from remoteBranch'; \
      remote=$(echo $remoteBranch | awk -F/ '{print $1}'); \
      default_branch=$(git print-default-branch $remote); \
      echo \"Checking out default branch '$default_branch'\"; \
      remoteBranch=$remote/$default_branch; \
    fi; \
    : 'If branch exists locally check it out. Otherwise, create a local branch that tracks the remote branch.'; \
    branchWithOption=$(echo $remoteBranch | awk -v localBranches="@"$localBranches -v remoteBranch=$remoteBranch \
      '{ \
        branch = substr($NF, index($NF, \"/\") + 1); \
        if (match(localBranches, \"@\"branch\"@\") != 0) \
          print branch; \
        else \
          print \"--track \" remoteBranch; \
      }'); \
    git checkout ${branchWithOption}; \
  }; f"

  # Decorates the output of `git for-each-ref` with a tracking symbol, line no., current branch marker & tracking status
  decorated = "!f() {\
    current_branch=$(git branch --show-current); \
    branches=$(\
      git for-each-ref \
        \"$@\" \
        --format='%(refname:short)' refs/heads/ \
    ); \
    branches_with_tracking=$(\
      git with-tracking \
        --color=always \
        --format='%(color:blue)%(committerdate:format:%a %Y-%b-%d %H:%M)%(color:reset)|%(color:green)%(authorname)%(color:reset)|%(color:yellow)%(objectname:short)%(color:reset)|%(refname:short)|%(upstream:remotename)|' \
        \"$@\" \
    ); \
    line_number=1; \
    echo \"$branches_with_tracking\" | while IFS= read -r branch_with_tracking; do \
      branch_name=$(echo \"$branches\" | sed -n \"${line_number}p\"); \
      if [ \"$branch_name\" = \"$current_branch\" ]; then \
        branch_with_line_number=\"▶︎|$branch_with_tracking\"; \
      else \
        branch_with_line_number=\"$line_number|$branch_with_tracking\"; \
      fi; \
      echo \"$branch_with_line_number\" | awk '{\
        if (substr($NF, length($NF)) == \"-\") {\
          print \"  \" substr($0, 1, length($0) - 1); \
        } else {\
          print \"⦿ \" $0; \
        }\
      }'; \
      line_number=$((line_number + 1)); \
    done \
    | column -ts'|'; \
  }; f"

  # Same as `git decorated`, but for remote branches
  decorated-remote = "!f() {\
    refs='refs/remotes/'; \
    args=(); \
    for arg in \"$@\"; do \
      if [[ $arg == refs/remotes/* ]]; then \
        refs=$arg; \
      else \
        args+=(\"$arg\"); \
      fi; \
    done; \
    current_branch=$(git branch --show-current); \
    : 'Get a list of all local tracking branches, filtering out those whose name is not an exact match'; \
    local_branches_with_tracking=$(\
      git with-tracking \
        --color=always \
        refs/heads/ \
        --format='%(upstream:short) %(refname:short)' \
      | awk '{\
          split($1, remote_segments, \"/\"); \
          remote_branch_name = substr($1, index($1, \"/\") + 1); \
          local_branch_name = $2; \
          if (remote_branch_name == local_branch_name && $3 != \"-\") print $0; \
        }' \
    ); \
    : 'Names of the remote branches, using the same order & filters as the command to run'; \
    : 'We need this because we do not know where in the output the branch name will appear'; \
    remote_branch_names=$(\
      git for-each-ref \
        $refs \
        \"${args[@]}\" \
        --format='%(refname:short)' $refs \
    ); \
    : 'The full remote branch information'; \
    remote_branches=$( \
      git for-each-ref \
        --color=always \
        $refs \
        --format='%(color:blue)%(committerdate:format:%a %Y-%b-%d %H:%M)%(color:reset)|%(color:green)%(authorname)%(color:reset)|%(color:yellow)%(objectname:short)%(color:reset)|%(refname:short)|#local#' \
        \"${args[@]}\" \
    ); \
    line_number=1; \
    echo \"$remote_branches\" | while IFS= read -r remote_branch; do \
      : 'Get the name of this branch'; \
      remote_branch_name=$(echo \"$remote_branch_names\" | sed -n \"${line_number}p\"); \
      if [ -z \"$remote_branch_name\" ]; then \
        continue; \
      fi; \
      : 'Find the local branch mapped to this branch'; \
      local_branch_with_tracking=$(\
        echo \"$local_branches_with_tracking\" | awk -v name=\"$remote_branch_name\" '$1 == name {print $0}' \
      ); \
      : 'Assume there is no tracking branch'; \
      branch_with_line_number=\"$line_number|$remote_branch\"; \
      has_tracking_branch=false; \
      if [ -n \"$local_branch_with_tracking\" ]; then \
        has_tracking_branch=true; \
        local_branch_name=$(echo \"$local_branch_with_tracking\" | awk '{print $2}'); \
        tracking=$(echo \"$local_branch_with_tracking\" | awk '{print $3}'); \
        if [ \"$local_branch_name\" = \"$current_branch\" ]; then \
          branch_with_line_number=\"▶︎|$remote_branch $tracking\"; \
        else \
          branch_with_line_number=\"$line_number|$remote_branch $tracking\"; \
        fi; \
      else \
        if [[ \"$remote_branch_name\" == */HEAD ]]; then \
          remote_branch_with_default=$(echo \"$remote_branch\" | sed \"s|$remote_branch_name|$remote_branch_name [default branch]|\") \
          branch_with_line_number=\"$line_number|$remote_branch_with_default\"; \
        fi; \
      fi; \
      slash_count=$(echo \"$remote_branch_name\" | awk -F/ '{print NF-1}'); \
      if [ $slash_count -eq 0 ]; then \
        : 'Disabled resolution of default branch because it is a slow operation'; \
        : 'default_branch_name=$(git default-branch $remote_branch_name)'; \
        : 'branch_with_line_number=\"$line_number|$remote_branch => ${remote_branch_name}/${default_branch_name}\"'; \
        remote_branch_with_default=$(echo \"$remote_branch\" | sed \"s|$remote_branch_name|$remote_branch_name [default branch]|\") \
        branch_with_line_number=\"$line_number|$remote_branch_with_default\"; \
      fi; \
      : 'Prepend ⦿ if branch has a tracking branch'; \
      if [ -n \"$local_branch_with_tracking\" ]; then \
        row=\"⦿ $branch_with_line_number\"; \
      else \
        row=\"  $branch_with_line_number\"; \
      fi; \
      if [[ \"$has_tracking_branch\" == \"false\" ]]; then \
        row=$(\
          echo \"$row\" \
          | sed 's/|#local#$/|/' \
          | sed 's/|#local#|/| |/' \
        ); \
      else \
        row=$(\
          echo \"$row\" | sed 's/#local#/local/' \
        ); \
      fi; \
      echo \"$row\"; \
      line_number=$((line_number + 1)); \
    done \
    | column -ts'|'; \
  }; f"

  # Displays the name of the remote's default branch
  default-branch = "!f() {\
    remote=${1:-origin}; \
    git remote show $remote | grep 'HEAD branch' | awk '{print $NF}'; \
  }; f"

  extract-refs = "!f() {\
    refs=; \
    other_args=(); \
    for arg in \"$@\"; do \
      case $arg in \
        refs/remotes/*) refs=$arg ;; \
        *) other_args+=("$arg") ;; \
      esac; \
    done; \
    echo \"$refs ${other_args[@]}\"; \
  }; f"

  # Replaces tracking information from `git for-each-ref --format='%(upstream:track)'` with colour-coded symbols
  format-tracking = "!f() { \
    echo \"$1\" \
    | sed -e 's/\\[ahead \\([0-9]*\\)\\]/\\\\033[32m↑\\1\\\\033[0m/g' \
    | sed -e 's/\\[ahead \\([0-9]*\\), behind \\([0-9]*\\)\\]/\\\\033[32m↑\\1\\\\033[0m\\\\033[31m↓\\2\\\\033[0m/g' \
    | sed -e 's/\\[behind \\([0-9]*\\)\\]/\\\\033[31m↓\\1\\\\033[0m/g' \
    | sed -e $'s/\\[gone\\]/\\033[37m-×-\\033[0m/g' \
    | sed -e $'s/\\[synced\\]/\\033[32m✔\\033[0m/g'; \
  }; f"

  # Wrapper for `git decorated` that gets the 10 most recently updated local branches
  recent = "!f() {\
    if [ \"$1\" = 'help' ]; then \
      git recent-usage; \
      return 0; \
    fi; \
    count=10; \
    if [[ \"$1\" =~ ^-?[0-9]+$ ]]; then \
      count=$1; \
      shift; \
    fi; \
    git decorated \
      --count=$count \
      \"$@\" \
      --sort=-committerdate; \
    git warn-if-dirty; \
  }; f"

  recent-legend = "!f() { \
    echo \"Legend: ▶︎ current branch\"; \
    echo \"        ⦿ tracking branch | \\033[32m↑ commits ahead\\033[0m | \\033[31m↓ commits behind\\033[0m | \\033[32m✔\\033[0m up to date | \\033[37m-×-\\033[0m upstream gone\"; \
  }; f"

  recent-usage = "!f() { \
    echo \"Lists recent branches.\"; \
    echo \"Usage:  git recent [<count=10>] [<for-each-ref-args>]\"; \
    echo \"        git recent help\"; \
    echo \"        - <count=10>            # Number of branches to display\"; \
    echo \"        - <for-each-ref-args>   # Any arguments accepted by 'git for-each-ref'\"; \
    echo \"        - help                  # Displays this help message\"; \
    git recent-legend; \
  }; f"

  # Run `git recent` and then prompt to check out a branch by number
  recent-prompt = "!f() {\
    if [ \"$1\" = 'help' ]; then \
      git recent-prompt-usage; \
      return 0; \
    fi; \
    git recent \"$@\"; \
    printf \"Enter branch number to check out branch, [h] for help, or [Enter] to quit: \"; \
    read input; \
    case $input in \
      h) git recent-prompt-usage; exit 0 ;; \
      ''|q|0) exit ;; \
      *[!0-9]*) echo 'Error: Input is not a branch number.'; exit 1 ;; \
    esac; \
    git checkout-nth $input; \
  }; f"

  recent-prompt-usage = "!f() { \
    echo \"Lists recent branches and prompts to check out a branch.\"; \
    echo \"Usage:  git recent-prompt [<count=10>] [<for-each-ref-args>]\"; \
    echo \"        git recent-prompt help\"; \
    echo \"        - <count=10>            # Number of branches to display\"; \
    echo \"        - <for-each-ref-args>   # Any arguments accepted by 'git for-each-ref'\"; \
    echo \"        - help                  # Displays this help message\"; \
    echo \"Alias:  git recon\"; \
    git recent-legend; \
  }; f"

  # Wrapper for `git decorated-remote` that gets the 10 most recently updated remote branches
  recent-remote = "!f() {\
    if [ \"$1\" = 'help' ]; then \
      git recent-remote-usage; \
      return 0; \
    fi; \
    count=10; \
    if [[ \"$1\" =~ ^-?[0-9]+$ ]]; then \
      count=$1; \
      shift; \
    fi; \
    git decorated-remote \
      --count=$count \
      \"$@\" \
      --sort=-committerdate; \
    git warn-if-dirty; \
  }; f"

  recent-remote-legend = "!f() { \
    echo \"Legend: ▶︎ current local branch\"; \
    echo \"        ⦿ has local tracking branch | \\033[32m↑ commits ahead\\033[0m | \\033[31m↓ commits behind\\033[0m | \\033[32m✔\\033[0m up to date\"; \
  }; f"

  recent-remote-usage = "!f() { \
    echo \"Lists recent remote branches.\"; \
    echo \"Usage:  git recent-remote [<count=10>] [<for-each-ref-args>]\"; \
    echo \"        git recent-remote help\"; \
    echo \"        - <count=10>            # Number of branches to display\"; \
    echo \"        - <for-each-ref-args>   # Any arguments accepted by 'git for-each-ref'\"; \
    echo \"        - help                  # Displays this help message\"; \
    echo \"Alias:  git recent-r\"; \
    git recent-remote-legend; \
  }; f"

  # Run `git recent-remote` and then prompt to check out a branch by number
  recent-remote-prompt = "!f() {\
    if [ \"$1\" = 'help' ]; then \
      git recent-remote-prompt-usage; \
      return 0; \
    fi; \
    count=10; \
    if [[ \"$1\" =~ ^-?[0-9]+$ ]]; then \
      count=$1; \
    fi; \
    git recent-remote --count=$count \"$@\"; \
    printf \"Enter branch number to check out branch, [h] for help, or [Enter] to quit: \"; \
    read input; \
    case $input in \
      h) git recent-remote-prompt-usage; exit 0 ;; \
      ''|q|0) exit ;; \
      *[!0-9]*) echo 'Error: Input is not a branch number.'; exit 1 ;; \
    esac; \
    git checkout-nth-remote $input; \
  }; f"

  # Shows usage message for `git recent-remote-prompt`
  recent-remote-prompt-usage = "!f() { \
    echo \"Usage:  git recent-remote-prompt [<count=10>] [<for-each-ref-args>]\"; \
    echo \"        git recent-remote-prompt help\"; \
    echo \"        - <count=10>            # Number of branches to display\"; \
    echo \"        - <for-each-ref-args>   # Any of the standard args accepted by 'git for-each-ref'\"; \
    echo \"        - help                  # Displays this help message\"; \
    echo \"Alias:  git recon-r\"; \
    git recent-remote-legend; \
  }; f"

  # Warns if the working directory has uncommitted changes
  warn-if-dirty = "!f() {\
    if ! git diff --quiet || ! git diff --staged --quiet; then \
      echo '⚠️ Working directory has uncommitted changes.'; \
    fi; \
  }; f"

  # Appends tracking information to each line of the output of the original command
  with-tracking = "!f() {\
    : 'This is a wrapper for for-each-ref refs/heads, so all options will be forwarded to that command.'; \
    : 'But first run the same command and get only tracking information.'; \
    branches_with_tracking=$(\
      git branches-with-tracking refs/heads \"$@\" \
      | while read line; do git format-tracking \"$line\"; done \
      | tr '\n' '@' \
    ); \
    branches=$(\
      git for-each-ref \"$@\" refs/heads/ \
      | tr '\n' '@' \
    ); \
    echo \"$branches\" | awk -F '@' -v bt=\"$branches_with_tracking\" \
      'BEGIN {split(bt, btArr, \"@\"); OFS=\" \"} { \
        for (i = 1; i <= NF; i++) { \
          if ($i == \"\" || btArr[i] == \"\") continue; \
          split(btArr[i], trackingInfo, \" \"); \
          print $i, (length(trackingInfo) >= 3 ? trackingInfo[3] : \"-\"); \
        } \
      }'; \
  }; f"

  # Aliases for "checkout" & "recent + checkout": local branches
  con = checkout-nth
  recon = recent-prompt

  # Aliases for "checkout", "recent" & "recent + checkout": remote branches
  con-r = checkout-nth-remote
  recent-r = recent-remote
  recon-r = recent-remote-prompt
